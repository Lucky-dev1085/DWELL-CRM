import React, { FC, useState, useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { get } from 'lodash';
import moment from 'moment';
import TimeAgo from 'react-timeago';
import noteActions from 'dwell/actions/note';
import { communicationTypes, communicationIcons, timeFormatter } from 'dwell/constants';
import { CommunicationObject } from 'src/interfaces';
import { ConfirmActionModal } from 'site/components';
import { CommunicationItem, CommunicationWrapper, ItemCard, ItemHeader, Avatar, TitleWrapper, BodyHeader, BodyTitle, ShowUnits,
  EntireMessage, GreenBadge, TourTitle, ContentWrapper, TimeWrapper, ItemFooter, ButtonWhite } from './styles';
import NoteModal from './_note_modal';

interface CommunicationActivityProps {
  activity: CommunicationObject,
  date: string,
  handleClickItem: (id: number) => void,
  itemClickId: number,
  indexEl: number,
  type: string,
}

const CommunicationActivity: FC<CommunicationActivityProps> = ({ activity, date, handleClickItem, itemClickId, indexEl, type }) => {
  const [isViewMore, setViewMore] = useState(false);
  const [isRecentDate, setRecentDate] = useState(false);
  const [isNoteModalOpen, setNoteModalOpen] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [removeNote, setRemoveNote] = useState(null);

  const floorPlans = useSelector(state => state.property.property.floor_plans);
  const leadNotes = useSelector(state => state.note.leadNotes);
  const dispatch = useDispatch();
  const { deleteNoteById } = noteActions;

  const timer = useRef(null);

  const isTour = activity.type === 'TOUR_CREATED';
  const isNote = type === 'NOTE';

  const getActivityTitle = () => {
    const splitString = activity.transformed_content.split('updated to');

    return `${get(splitString, '[0]', '')}<span style="font-weight:400; font-size: 0.875rem; color: #344563;">updated to</span>${get(splitString, '[1]', '')}`;
  };
  const textField = isNote ? 'text' : 'transformed_content';
  const noteCharacterLength = 2000;
  const isLongContent = (activity[textField] || '').replace(/<[^>]*>/g, '').length > noteCharacterLength;
  const preparedContent = activity[textField].includes('updated to') ? getActivityTitle() : activity[textField];
  const content = isLongContent && isNote ? `${activity[textField].substring(0, noteCharacterLength)}...` : preparedContent;
  const title = isNote ? '' : content;
  const isClicked = itemClickId === activity.id;
  const dateTitle = moment(date).format('lll');
  const isAutoGenerated = isNote && get(activity, 'is_auto_generated');

  useEffect(() => {
    const currentNote = leadNotes.find(el => el.id === activity.id);
    setRemoveNote(currentNote);
  }, [leadNotes]);

  useEffect(() => {
    const isRecent = Math.abs(moment(date).diff(moment(), 'm')) <= 5;

    setRecentDate(isRecent);

    if (isRecent) {
      const timeDiff = 360 - moment().diff(moment(date), 'second');

      if (timer.current) {
        clearTimeout(timer.current);
      }

      timer.current = setTimeout(() => {
        timer.current = null;
        setRecentDate(false);
      }, timeDiff * 1000);
    }
  }, [activity]);

  const handleDeleteNote = () => {
    setShowConfirmModal(true);
  };

  const confirmDeleteNote = () => {
    dispatch(deleteNoteById(removeNote.id, removeNote.lead));
    setShowConfirmModal(false);
    setRemoveNote(null);
  };

  return (
    <CommunicationItem
      className="flex-row-reverse"
      id={`comm-${activity.id}`}
      onClick={() => handleClickItem(activity.id)}
      $first={!indexEl}
    >
      <CommunicationWrapper reverse activity={!isNote} $isNote={isNote}>
        <ItemCard selected={isClicked} $white $isNote={isNote}>
          <ItemHeader $transparentBottom>
            <Avatar color="#c1c8de"><i className={communicationIcons[activity.type || type]} /></Avatar>
            <TitleWrapper>
              <BodyHeader>
                <span>{activity.creator ? activity.creator : 'Dwell'} - {isNote ? 'Internal Note' : communicationTypes[activity.type]}</span>
                {isRecentDate ?
                  <GreenBadge title={dateTitle}>JUST NOW</GreenBadge> :
                  <TimeWrapper>
                    <span>{<TimeAgo date={dateTitle} title={dateTitle} formatter={timeFormatter} />}</span>
                    <span>{dateTitle}</span>
                  </TimeWrapper>}
              </BodyHeader>
              <BodyTitle>
                <h6 className="mb-0" dangerouslySetInnerHTML={{ __html: title }} />
              </BodyTitle>
            </TitleWrapper>
          </ItemHeader>
          {(isTour || isNote) &&
            <ContentWrapper $isNote={isNote}>
              {isTour && get(activity, 'tour.owner') &&
                <ShowUnits>
                  <TourTitle>Assigned to:</TourTitle>
                  <TourTitle weight> {activity.tour.owner}</TourTitle>
                </ShowUnits>}
              {isTour && get(activity, 'tour.units') && activity.tour.units.length > 0 &&
                <ShowUnits>
                  <TourTitle>Showing units: </TourTitle>
                  {activity.tour.units.map((unitId, index) => {
                    let unitData;
                    floorPlans.forEach((plan) => {
                      if (!unitData) {
                        const planUnit = plan.units.filter(unit => unit.id === unitId);
                        if (planUnit.length) unitData = { ...planUnit[0], planName: plan.plan };
                      }
                    });

                    return unitData && <TourTitle key={index} weight>{unitData.unit} ({unitData.planName}){index !== (activity.tour.units.length - 1) ? ',' : ''} </TourTitle>;
                  })}
                </ShowUnits>}
              {isTour && get(activity, 'tour.tour_date') &&
                <ShowUnits>
                  <TourTitle>Due:</TourTitle>
                  <TourTitle weight> {moment(activity.tour.tour_date).format('lll')}</TourTitle>
                </ShowUnits>}
              {isTour && get(activity, 'tour.description') &&
                <ShowUnits>
                  <TourTitle>Description:</TourTitle>
                  <br />
                  <TourTitle weight>{activity.tour.description}</TourTitle>
                </ShowUnits>}
              {isNote &&
                <React.Fragment>
                  <p dangerouslySetInnerHTML={{ __html: isViewMore ? activity.text : content }} className="mt-10" />
                  {isLongContent && <EntireMessage onClick={() => setViewMore(!isViewMore)}>{isViewMore ? 'Show Less' : 'View More'}</EntireMessage>}
                </React.Fragment>}
            </ContentWrapper>}
          {isNote && removeNote && !isAutoGenerated &&
            <ItemFooter>
              <ButtonWhite className="btn" right onClick={handleDeleteNote}>Delete</ButtonWhite>
              <ButtonWhite className="btn ml-2" onClick={() => setNoteModalOpen(true)}>Edit</ButtonWhite>
            </ItemFooter>}
        </ItemCard>
      </CommunicationWrapper>
      {isNoteModalOpen &&
        <NoteModal
          show={isNoteModalOpen}
          handleClose={() => setNoteModalOpen(false)}
          editId={activity.id}
        />}
      {showConfirmModal &&
        <ConfirmActionModal
          text="Do you wish to delete note"
          itemName={get(removeNote, 'actor')}
          onConfirm={confirmDeleteNote}
          onClose={() => setShowConfirmModal(false)}
          show={showConfirmModal}
          title="Delete Note"
        />}
    </CommunicationItem>
  );
};

export default CommunicationActivity;
